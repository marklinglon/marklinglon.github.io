<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>汪茫人海</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-23T06:27:28.420Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>mark long</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Alertmanager</title>
    <link href="http://example.com/2023/05/23/alertmanager/"/>
    <id>http://example.com/2023/05/23/alertmanager/</id>
    <published>2023-05-23T06:07:43.635Z</published>
    <updated>2023-05-23T06:27:28.420Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  smtp_smarthost: &quot;&quot;</span><br><span class="line">  smtp_from: &quot;&quot;</span><br><span class="line">  smtp_auth_username: &quot;&quot;</span><br><span class="line">  smtp_auth_password: &quot;&quot;</span><br><span class="line">route:</span><br><span class="line">  group_by: [&quot;alertname&quot;,&quot;severity&quot;]</span><br><span class="line">  group_wait: 60s # 接收到告警后，多久开始发送,</span><br><span class="line">  group_interval: 120s # 同一个周期内，多个分组发送报警的间隔时间</span><br><span class="line">  repeat_interval: 60s # 不同周期内，每个分组重复告警的时间间隔</span><br><span class="line">  receiver: devops # 默认使用这个接收器</span><br><span class="line">  routes:</span><br><span class="line">  - receiver: test-dev</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">       POD_IP: &#x27;^10\.100.*&#x27;</span><br><span class="line">       alertname: ^(BlackboxProbeFailed|PodMemoryUsageAlmostFull|JvmMemoryUsageAlmostFull|ElasticsearchNoNewDocuments|etcdMembersDown|etcdInsufficientMembers|etcdNoLeader|JvmFullGcOccured|JvmThreadsUsageOverload|PodNotReady|KubePodNotReady)$</span><br><span class="line">  - receiver: prod-dev</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">       POD_IP: &#x27;^10\.102.*&#x27;</span><br><span class="line">       alertname: ^(BlackboxProbeFailed|PodMemoryUsageAlmostFull|JvmMemoryUsageAlmostFull|ElasticsearchNoNewDocuments|etcdMembersDown|etcdInsufficientMembers|etcdNoLeader|JvmFullGcOccured|JvmThreadsUsageOverload|PodNotReady|KubePodNotReady)$</span><br><span class="line">  - receiver: test-ops-crit</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">      severity: critical</span><br><span class="line">      POD_IP: &#x27;^10\.100.*&#x27;</span><br><span class="line">  - receiver: prod-ops-crit</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">      severity: critical</span><br><span class="line">      POD_IP: &#x27;^10\.102.*&#x27;</span><br><span class="line">  - receiver: test-ops-warn</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">      severity: warning</span><br><span class="line">      POD_IP: &#x27;^10\.100.*&#x27;</span><br><span class="line">  - receiver: prod-ops-warn</span><br><span class="line">    group_wait: 10s</span><br><span class="line">    match_re:</span><br><span class="line">      severity: warning</span><br><span class="line">      POD_IP: &#x27;^10\.102.*&#x27;</span><br><span class="line"></span><br><span class="line">receivers:</span><br><span class="line">- name: &#x27;devops&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: http://alertmanager-wechat:8001</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">- name: &#x27;test-ops-crit&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &quot;&quot;</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">- name: &#x27;test-ops-warn&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &quot;&quot;</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">- name: &#x27;test-dev&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &quot;&quot;</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">- name: &#x27;prod-ops-crit&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &quot;&quot;</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">- name: &#x27;prod-ops-warn&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &quot;&quot;</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">- name: &#x27;prod-dev&#x27;</span><br><span class="line">  webhook_configs:</span><br><span class="line">  - url: &quot;&quot;</span><br><span class="line">    send_resolved: false</span><br><span class="line"></span><br><span class="line">inhibit_rules:</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;critical&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;critical&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;]</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;error&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;error&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;]</span><br><span class="line">  - source_match:</span><br><span class="line">      severity: &#x27;warning&#x27;</span><br><span class="line">    target_match:</span><br><span class="line">      severity: &#x27;warning&#x27;</span><br><span class="line">    equal: [&#x27;alertname&#x27;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubebuilder Admission Webhooks</title>
    <link href="http://example.com/2023/05/23/kubebuilder-Admission-Webhooks/"/>
    <id>http://example.com/2023/05/23/kubebuilder-Admission-Webhooks/</id>
    <published>2023-05-23T03:53:22.095Z</published>
    <updated>2023-05-24T14:22:02.309Z</updated>
    
    <content type="html"><![CDATA[<p>Kubebuilder Admission Webhooks</p><ol><li><p>什么是准入控制?<br />准入控制（Admission Controller）是 Kubernetes API Server 用于拦截请求的一种手段。Admission 可以做到对请求的资源对象进行校验，修改。service mesh 最近很火的项目 Istio 天生支持 Kubernetes，利用的就是 Admission 对服务实例自动注入 sidecar。</p></li><li><p>什么是准入 Webhook？<br />准入 Webhook 是一种用于接收准入请求并对其进行处理的 HTTP 回调机制。 可以定义两种类型的准入 webhook，即 验证性质的准入 Webhook 和 修改性质的准入 Webhook。修改性质的准入 Webhook 会先被调用。它们可以更改发送到 API 服务器的对象以执行自定义的设置默认值操作。</p></li></ol><p>在完成了所有对象修改并且 API 服务器也验证了所传入的对象之后， 验证性质的 Webhook 会被调用，并通过拒绝请求的方式来强制实施自定义的策略。</p><p>说明： 如果准入 Webhook 需要保证它们所看到的是对象的最终状态以实施某种策略。 则应使用验证性质的准入 Webhook，因为对象被修改性质 Webhook 看到之后仍然可能被修改。</p><ol start="3"><li><p>尝试准入 Webhook<br />先决条件<br />•确保 Kubernetes 集群版本至少为 v1.16（以便使用 <a href="http://admissionregistration.k8s.io/v1">admissionregistration.k8s.io/v1</a> API） 或者 v1.9 （以便使 <a href="http://admissionregistration.k8s.io/v1beta1">admissionregistration.k8s.io/v1beta1</a> API）。<br />•确保启用 MutatingAdmissionWebhook 和 ValidatingAdmissionWebhook 控制器。 这里是一组推荐的 admission 控制器，通常可以启用。<br />•确保启用了 <a href="http://admissionregistration.k8s.io/v1beta1">admissionregistration.k8s.io/v1beta1</a> API。</p></li><li><p>配置准入 Webhook<br />你可以通过 ValidatingWebhookConfiguration 或者 MutatingWebhookConfiguration 动态配置哪些资源要被哪些准入 Webhook 处理。详细配置可以参阅 Webhook配置 部分。</p></li><li><p>认证和信任<br />默认情况下，apiserver不会向webhooks进行身份验证。但是，如果您想对客户端进行身份验证，可以将apiserver配置为使用基本身份验证、承载令牌或证书对Webhook进行身份验证。你可以在这里找到详细的步骤。</p></li><li><p>编写一个准入 Webhook 服务器<br />Webhook Admission 属于同步调用，需要用户部署自己的 webhook server，创建自定义的配置资源对象： ValidatingWebhookConfiguration 或 MutatingWebhookConfiguration。下面使用 kubebuilder 开发一个简单的 demo。</p></li></ol><p>6.1 创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubebuilder init --domain blazehu.com --owner &quot;blazehu&quot; --repo blazehu.com/kubegame</span><br></pre></td></tr></table></figure><p>提示： 这里通过 kubebuilder v3 创建的话，在 config 目录下会缺少 certmanager、webhook 目录以及 default/manager_webhook_patch.yml 和 webhookcainjection_patch.yaml 文件。可以通过从v2生成拷贝过来进行修改。</p><p>6.2 创建控制器<br />这里只需要创建一个控制器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubebuilder create api --group svc --version v1 --kind App</span><br></pre></td></tr></table></figure><p>6.3 创建 webhook<br />Implement Your Handler<br />新增 mutatingwebhook.go &amp; validatingwebhook.go 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">// mutatingwebhook.go</span><br><span class="line">package controllers</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;encoding/json&quot;</span><br><span class="line">corev1 &quot;k8s.io/api/core/v1&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/client&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/webhook/admission&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// +kubebuilder:webhook:admissionReviewVersions=v1,sideEffects=None,path=/mutate-v1-svc,mutating=true,failurePolicy=fail,groups=&quot;&quot;,resources=services,verbs=create;update,versions=v1,name=msvc.kb.io</span><br><span class="line"></span><br><span class="line">// KubeGameAnnotator annotates Pods</span><br><span class="line">type KubeGameAnnotator struct &#123;</span><br><span class="line">Client client.Client</span><br><span class="line">decoder *admission.Decoder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Handle adds an annotation to every incoming pods.</span><br><span class="line">func (a *KubeGameAnnotator) Handle(ctx context.Context, req admission.Request) admission.Response &#123;</span><br><span class="line">pod := &amp;corev1.Pod&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := a.decoder.Decode(req, pod)  </span><br><span class="line">if err != nil &#123;  </span><br><span class="line">    return admission.Errored(http.StatusBadRequest, err)  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">if pod.Annotations == nil &#123;  </span><br><span class="line">    pod.Annotations = map\[string\]string&#123;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">pod.Annotations\[&quot;example-mutating-admission-webhook&quot;\] = &quot;foo&quot;  </span><br><span class="line"></span><br><span class="line">marshaledPod, err := json.Marshal(pod)  </span><br><span class="line">if err != nil &#123;  </span><br><span class="line">    return admission.Errored(http.StatusInternalServerError, err)  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">return admission.PatchResponseFromRaw(req.Object.Raw, marshaledPod)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// KubeGameAnnotator implements admission.DecoderInjector.</span><br><span class="line">// A decoder will be automatically injected.</span><br><span class="line"></span><br><span class="line">// InjectDecoder injects the decoder.</span><br><span class="line">func (a *KubeGameAnnotator) InjectDecoder(d *admission.Decoder) error &#123;</span><br><span class="line">a.decoder = d</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// validatingwebhook.go</span><br><span class="line">package controllers</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">corev1 &quot;k8s.io/api/core/v1&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/client&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/webhook/admission&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// +kubebuilder:webhook:admissionReviewVersions=v1,sideEffects=None,path=/validate-v1-svc,mutating=false,failurePolicy=fail,groups=&quot;&quot;,resources=services,verbs=create;update,versions=v1,name=vsvc.kb.io</span><br><span class="line"></span><br><span class="line">// KubeGameValidator validates Pods</span><br><span class="line">type KubeGameValidator struct &#123;</span><br><span class="line">Client client.Client</span><br><span class="line">decoder *admission.Decoder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Handle admits a pod if a specific annotation exists.</span><br><span class="line">func (v *KubeGameValidator) Handle(ctx context.Context, req admission.Request) admission.Response &#123;</span><br><span class="line">pod := &amp;corev1.Pod&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := v.decoder.Decode(req, pod)  </span><br><span class="line">if err != nil &#123;  </span><br><span class="line">    return admission.Errored(http.StatusBadRequest, err)  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">key := &quot;example-mutating-admission-webhook&quot;  </span><br><span class="line">anno, found := pod.Annotations\[key\]  </span><br><span class="line">if !found &#123;  </span><br><span class="line">    return admission.Denied(fmt.Sprintf(&quot;missing annotation %s&quot;, key))  </span><br><span class="line">&#125;  </span><br><span class="line">if anno != &quot;foo&quot; &#123;  </span><br><span class="line">    return admission.Denied(fmt.Sprintf(&quot;annotation %s did not have value %q&quot;, key, &quot;foo&quot;))  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">return admission.Allowed(&quot;&quot;)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// KubeGameValidator implements admission.DecoderInjector.</span><br><span class="line">// A decoder will be automatically injected.</span><br><span class="line"></span><br><span class="line">// InjectDecoder injects the decoder.</span><br><span class="line">func (v *KubeGameValidator) InjectDecoder(d *admission.Decoder) error &#123;</span><br><span class="line">v.decoder = d</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：因为上述逻辑需要services权限，所以我们在控制器里需要添加如下内容 //+kubebuilder:rbac:groups=“”,resources=services,verbs=get;list;watch;create;update;patch;delete 用于生成 rbac manifests。</p><p>Register Your Handler<br />修改 main.go ，注册我们的 webhook handler</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setupLog.Info(&quot;setting up webhook server&quot;)</span><br><span class="line">hookServer := mgr.GetWebhookServer()</span><br><span class="line"></span><br><span class="line">setupLog.Info(&quot;registering webhooks to the webhook server&quot;)</span><br><span class="line">hookServer.Register(&quot;/mutate-v1-svc&quot;, &amp;webhook.Admission&#123;Handler: &amp;controllers.KubeGameAnnotator&#123;Client: mgr.GetClient()&#125;&#125;)</span><br><span class="line">hookServer.Register(&quot;/validate-v1-svc&quot;, &amp;webhook.Admission&#123;Handler: &amp;controllers.KubeGameValidator&#123;Client: mgr.GetClient()&#125;&#125;)</span><br></pre></td></tr></table></figure><p>提示： 这里注册的path（例如 validate-v1-sv）路径需要和 validatingwebhook.go 、mutatingwebhook.go 文件里的 CRD validation 匹配，不然 kustomize 生成出来的 webhook yaml 文件不对。</p><p>本地测试<br />make run 会报如下错误，是因为没有证书导致，需要配置证书，可以手动签发证书。</p><p>1.646924212701068e+09 ERROR setup problem running manager {“error”: “open /var/folders/67/375276sx6hv0nln1whwm5syh0000gq/T/k8s-webhook-server/serving-certs/tls.crt: no such file or directory”}</p><p>我本地指定证书目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options&#123;</span><br><span class="line">Scheme: scheme,</span><br><span class="line">MetricsBindAddress: metricsAddr,</span><br><span class="line">Port: 9443,</span><br><span class="line">HealthProbeBindAddress: probeAddr,</span><br><span class="line">LeaderElection: enableLeaderElection,</span><br><span class="line">LeaderElectionID: &quot;27e1b0af.blazehu.com&quot;,</span><br><span class="line">CertDir: &quot;./cert/&quot;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新启动发现恢复正常</p><p>提示： run controller-gen rbac:roleName=manager-role crd webhook paths=./… output:crd:artifacts:config=config/crd/bases -w to see all available markers, or controller-gen rbac:roleName=manager-role crd webhook paths=./… output:crd:artifacts:config=config/crd/bases -h for usage</p><ol start="7"><li>部署至集群<br />7.1 部署 cert manager<br />建议使用 certmanager 为 webhook 服务器提供证书。其他解决方案也有效，只要它们将证书放在所需的位置。安装文档点这里<br />通过如下方式注入 caBundle :</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># This patch add annotation to admission webhook config and</span><br><span class="line"># the variables $(CERTIFICATE_NAMESPACE) and $(CERTIFICATE_NAME) will be substituted by kustomize.</span><br><span class="line">apiVersion: admissionregistration.k8s.io/v1</span><br><span class="line">kind: MutatingWebhookConfiguration</span><br><span class="line">metadata:</span><br><span class="line">name: mutating-webhook-configuration</span><br><span class="line">annotations:</span><br><span class="line">cert-manager.io/inject-ca-from: $(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)</span><br><span class="line">---</span><br><span class="line">apiVersion: admissionregistration.k8s.io/v1</span><br><span class="line">kind: ValidatingWebhookConfiguration</span><br><span class="line">metadata:</span><br><span class="line">name: validating-webhook-configuration</span><br><span class="line">annotations:</span><br><span class="line">cert-manager.io/inject-ca-from: $(CERTIFICATE_NAMESPACE)/$(CERTIFICATE_NAME)</span><br></pre></td></tr></table></figure><p>7.2 构建镜像<br />•镜像替换：default/manager_auth_proxy_patch.yaml 文件中的 <a href="http://gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0">gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0</a> （网络慢）<br />•Dockerfile 去掉 go mod download，直接使用本地 vendor 构建 （网络慢）<br />•Dockerfile 去掉 COPY api/ api/， 因为没有创建 Resource<br />•去掉 main.go 文件中配置的证书路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make docker-build IMG=xxxx</span><br><span class="line">make docker-push IMG=xxxx</span><br></pre></td></tr></table></figure><p>7.3 修改模版，然后部署<br />•修改 config/default/kustomization.yaml ， 将 webhook、certmanager 相关的注释去掉。<br />•修改 config/crd/kustomization.yaml ，将 webhook、certmanager 相关的注释去掉。<br />•修改 config/default/kustomization.yaml ， 将 crd 相关的给注释掉。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make deploy IMG=xxxx</span><br></pre></td></tr></table></figure><p>部署成功：</p><p>查看控制器日志：</p><p>7.4 测试<br />简单创建一个 service，webhook 会注入一个注解，并进行验证。下图可以看到成功注入。</p><p>控制日志：</p><p>说明：查看 MutatingWebhookConfiguration 配置可以看到 caBundle 被注入其中了。</p><ol start="8"><li>总结<br />总结下 webhook Admission 的优势：</li></ol><p>•webhook 可动态扩展 Admission 能力，满足自定义客户的需求。<br />•不需要重启 API Server，可通过创建 webhook configuration 热加载 webhook admission。</p><p>Reference documentation<br />•<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers">https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers</a><br />•<a href="https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster/">https://kubernetes.io/zh/docs/tasks/tls/managing-tls-in-a-cluster/</a><br />•<a href="https://book.kubebuilder.io/reference/admission-webhook.html">https://book.kubebuilder.io/reference/admission-webhook.html</a><br />•<a href="https://github.com/kubernetes-sigs/controller-runtime/tree/master/examples/builtins">https://github.com/kubernetes-sigs/controller-runtime/tree/master/examples/builtins</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubebuilder Admission Webhooks&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;什么是准入控制?&lt;br /&gt;
准入控制（Admission Controller）是 Kubernetes API Server 用于拦截请求的一种手段。Admission 可以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubebuilder Watch Rresources</title>
    <link href="http://example.com/2023/05/23/kubebuilder-watch-resources/"/>
    <id>http://example.com/2023/05/23/kubebuilder-watch-resources/</id>
    <published>2023-05-23T03:51:52.668Z</published>
    <updated>2023-05-23T03:52:27.292Z</updated>
    
    <content type="html"><![CDATA[<p>Kubebuilder Watching Resources<br />我们在开发过程中，可能需要开发一个类似Deployment的资源逻辑，管理依赖资源是控制器的基础，如果不能观察它们的状态变化就不可能管理它们。这就意味着，我们需要 reconciler 能监控多个资源的变化。</p><p>NOTE: Deployment 必须知道其管理的 ReplicaSet 何时更改，ReplicaSet 必须知道其管理的 Pod 何时被删除，或者从健康变为不健康等。</p><p>控制器运行时库为管理和监视资源提供了多种方式。这包括从简单而明显的用例（例如查看由控制器创建和管理的资源）到更独特和更高级的用例。</p><p>•控制器创建和管理的资源 (Watching Operator Managed Resources)<br />•外部管理的资源 (Watching Externally Managed Resources)</p><p>背景<br />以 Tcaplus 资源为例，Tcaplus 资源通过 ConfigMap（proto 文件）来创建表格。当 ConfigMap 发生变化时自动更新表格，下面例子不实际调用腾讯云API，只要验证接收到事件请求即可。</p><p>NOTE: TcaplusDB 是腾讯出品的分布式NoSQL数据库。官方API文档：<a href="https://cloud.tencent.com/document/product/596/39648%E3%80%82">https://cloud.tencent.com/document/product/596/39648。</a></p><p>控制器创建和管理的资源<br />资源定义 (Defined Tcaplus Resources)<br />api/v1/tcaplus_types.go</p><p>type TcaplusSpec struct {<br />Checksum string <code>json:&quot;checksum,omitempty&quot;</code><br />ConfigMapTemplate ConfigMapTemplate <code>json:&quot;configMapTemplate,omitempty&quot;</code><br />}</p><p>type ConfigMapTemplate struct {<br />Name string <code>json:&quot;name,omitempty&quot;</code><br />Data map[string]string <code>json:&quot;data,omitempty&quot;</code><br />}</p><p>控制器逻辑 (Manage the Owned Resource)<br />controllers/tcaplus_controller.go<br />当 tcaplus CR 创建时根据 ConfigMapTemplate 创建附属的 ConfigMap 资源并设置属主关系。</p><p>•Reconcile 方法：根据模版创建 ConfigMap 并设置属主关系<br />•SetupWithManager 方法：For 方法之后调用 Owns 方法func (r *TcaplusReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {<br />logger := log.FromContext(ctx)<br /><a href="http://logger.Info">logger.Info</a>(“reconciling”)<br />tcaplus := &amp;examplev1.Tcaplus{}<br />if err := r.Get(ctx, req.NamespacedName, tcaplus); err != nil {<br />return ctrl.Result{}, client.IgnoreNotFound(err)<br />}<br />configMap := &amp;corev1.ConfigMap{}<br /><a href="http://configMap.Name">configMap.Name</a> = <a href="http://tcaplus.Spec.ConfigMapTemplate.Name">tcaplus.Spec.ConfigMapTemplate.Name</a><br />configMap.Namespace = tcaplus.Namespace<br />configMap.Data = tcaplus.Spec.ConfigMapTemplate.Data</p><p>if err := controllerutil.SetControllerReference(tcaplus, configMap, r.Scheme); err != nil {<br />logger.Error(err, “get configmap failed”, “configmap”, <a href="http://configMap.Name">configMap.Name</a>)<br />return ctrl.Result{}, err<br />}<br />foundConfigMap := &amp;corev1.ConfigMap{}<br />err := r.Get(ctx, types.NamespacedName{Name: <a href="http://configMap.Name">configMap.Name</a>, Namespace: tcaplus.Namespace}, foundConfigMap)<br />if err != nil &amp;&amp; errors.IsNotFound(err) {<br />logger.V(1).Info(“creating configmap”, “configmap”, <a href="http://configMap.Name">configMap.Name</a>)<br />err = r.Create(ctx, configMap)<br />}<br />return ctrl.Result{}, nil<br />} // SetupWithManager sets up the controller with the Manager.<br />func (r *TcaplusReconciler) SetupWithManager(mgr ctrl.Manager) error {<br />return ctrl.NewControllerManagedBy(mgr).<br />For(&amp;examplev1.Tcaplus{}).<br />Owns(&amp;corev1.ConfigMap{}).<br />Complete®<br />}</p><p>NOTE：同一控制器创建的资源才可以设置属主关系，不然会提示：already owned by another controller。<br />测试<br />config/samples/example_v1_tcaplus.yaml</p><p>apiVersion: <a href="http://example.blazehu.com/v1">example.blazehu.com/v1</a><br />kind: Tcaplus<br />metadata:<br />name: tcaplus-sample<br />spec:<br />checksum: “123”<br />configMapTemplate:<br />name: “tcaplus-configmap-example”<br />data:<br />demo.proto: |<br />syntax = “proto3”;<br />package example;<br />message Example {<br />uint32 a = 1;<br />uint32 b = 2;<br />uint32 c = 3;<br />}</p><p>使用上述配置文件创建 tcaplus 资源。创建结果：</p><p>BLAZEHU-MB2:samples $ k get tcaplus<br />NAME AGE<br />tcaplus-sample 19m<br />BLAZEHU-MB2:samples $ k get configmap<br />NAME DATA AGE<br />tcaplus-configmap-example 1 19m</p><p>可以查看 tcaplus-configmap-example 的属主关系：</p><p>apiVersion: v1<br />data:<br />demo.proto: |<br />syntax = “proto3”;<br />package example;<br />message Example {<br />uint32 a = 1;<br />uint32 b = 2;<br />}<br />kind: ConfigMap<br />metadata:<br />creationTimestamp: “2022-07-07T09:02:43Z”<br />name: tcaplus-configmap-example<br />namespace: default<br />ownerReferences:</p><ul><li>apiVersion: <a href="http://example.blazehu.com/v1">example.blazehu.com/v1</a><br />blockOwnerDeletion: true<br />controller: true<br />kind: Tcaplus<br />name: tcaplus-sample<br />uid: 7c50f2e1-0e37-4aa0-bf49-c2d410d6153e<br />resourceVersion: “6837330713”<br />selfLink: /api/v1/namespaces/default/configmaps/tcaplus-configmap-example<br />uid: 6c29f90b-0e51-4d9f-a6a8-cfb6906ed1b0</li></ul><p>手动修改 tcaplus-sample 和 tcaplus-configmap-example 后查看控制器日志发现能正常观察 CR 和 ConfigMap 的变化了。</p><p>外部管理的资源<br />资源定义 (Defined Tcaplus Resources)<br />api/v1/tcaplus_types.go</p><p>type TcaplusSpec struct {<br />Checksum string <code>json:&quot;checksum,omitempty&quot;</code><br />ConfigMapRef ConfigMapReference <code>json:&quot;configMapRef,omitempty&quot;</code><br />}</p><p>type ConfigMapReference struct {<br />Name string <code>json:&quot;name,omitempty&quot;</code><br />}</p><p>控制器逻辑 (Manage the Owned Resource)<br />controllers/tcaplus_controller.go<br />For 方法之后调用 Watches 方法就可以监听对应资源的事件，但是会监听集群里所有相关资源的事件，所以这里我们自定义事件处理方法来过滤出我们关注的资源的事件。</p><p>•通过 EnqueueRequestsFromMapFunc 创建一个事件处理方法，该方法通过 FieldSelector 在 ConfigMap 的事件中过滤出跟 tcaplus CR 相关联的事件。<br />•使用 FieldSelector 时我们需要建立对应的索引，使用 mgr.GetFieldIndexer().IndexField() 创建。const (<br />ConfigMapField = “.spec.configMapRef.name”<br />) func (r *TcaplusReconciler) findObjectsForConfigMap(configMap client.Object) []reconcile.Request {<br />attachedTcaplusList := &amp;examplev1.TcaplusList{}<br />listOps := &amp;client.ListOptions{<br />FieldSelector: fields.OneTermEqualSelector(ConfigMapField, configMap.GetName()),<br />Namespace: configMap.GetNamespace(),<br />}<br />err := r.List(context.TODO(), attachedTcaplusList, listOps)<br />if err != nil {<br />return []reconcile.Request{}<br />}<br />requests := make([]reconcile.Request, len(attachedTcaplusList.Items))<br />for i, item := range attachedTcaplusList.Items {<br />requests[i] = reconcile.Request{<br />NamespacedName: types.NamespacedName{<br />Name: item.GetName(),<br />Namespace: item.GetNamespace(),<br />},<br />}<br />}<br />return requests<br />} // SetupWithManager sets up the controller with the Manager.<br />func (r *TcaplusReconciler) SetupWithManager(mgr ctrl.Manager) error {<br />if err := mgr.GetFieldIndexer().IndexField(context.Background(), &amp;examplev1.Tcaplus{}, ConfigMapField, func(rawObj client.Object) []string {<br />tcaplus := rawObj.(*examplev1.Tcaplus)<br />if <a href="http://tcaplus.Spec.ConfigMapRef.Name">tcaplus.Spec.ConfigMapRef.Name</a> == “” {<br />return nil<br />}<br />return []string{<a href="http://tcaplus.Spec.ConfigMapRef.Name">tcaplus.Spec.ConfigMapRef.Name</a>}<br />}); err != nil {<br />return err<br />}<br />return ctrl.NewControllerManagedBy(mgr).<br />For(&amp;examplev1.Tcaplus{}).<br />Watches(<br />&amp;source.Kind{Type: &amp;corev1.ConfigMap{}},<br />handler.EnqueueRequestsFromMapFunc(r.findObjectsForConfigMap),<br />builder.WithPredicates(predicate.ResourceVersionChangedPredicate{}),<br />).<br />Complete®<br />} 上面 ConfigMap 监听使用默认的 Predicates 过滤器 ResourceVersionChangedPredicate，查看源码定义就是说当 resource version 变化时事件会入队。// ResourceVersionChangedPredicate implements a default update predicate function on resource version change.<br />type ResourceVersionChangedPredicate struct {<br />Funcs<br />}</p><p>NOTE: 我们也可以自己定一个变更过滤器 Predicate。也可以通过 WithEventFilter 来针对监听的所有资源过滤。<br />测试<br />config/samples/example_v1_tcaplus.yaml</p><p>apiVersion: v1<br />kind: ConfigMap<br />metadata:<br />name: tcaplus-configmap-example<br />data:<br />demo.proto: |<br />syntax = “proto3”;<br />package example;<br />message Example {<br />uint32 a = 1;<br />uint32 b = 2;<br />uint32 c = 3;<br />}</p><hr /><p>apiVersion: <a href="http://example.blazehu.com/v1">example.blazehu.com/v1</a><br />kind: Tcaplus<br />metadata:<br />name: tcaplus-sample<br />spec:<br />checksum: “123”<br />configMapRef:<br />name: “tcaplus-configmap-example”</p><p>使用上述配置创建完毕后，手动修改 tcaplus-sample 和 tcaplus-configmap-example 查看控制器日志发现同样能正常观察 CR 和 ConfigMap 的变化。</p><p>NOTE: 查看 tcaplus-configmap-example 可以看到没有和 tcaplus 的属主关系。</p><p>总结<br />•EventHandler 可以在 watch 特定资源时设置该资源的事件监听规则。<br />•WithEventFilter 配置变更过滤器，可以针对 watch 的所有资源，统一地设置事件监听规则。<br />•Owns 源码分析可以发现 Owns 相当于调用 Watches(&amp;source.Kind{Type: <ForType-forInput>}, &amp;handler.EnqueueRequestForOwner{OwnerType: apiType, IsController: true})。</p><p>参考文档<br />•<a href="https://www.kubebuilder.io/reference/watching-resources.html">https://www.kubebuilder.io/reference/watching-resources.html</a><br />•<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/">https://kubernetes.io/zh-cn/docs/concepts/overview/working-with-objects/owners-dependents/</a><br />•<a href="https://segmentfault.com/a/1190000020359577">https://segmentfault.com/a/1190000020359577</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubebuilder Watching Resources&lt;br /&gt;
我们在开发过程中，可能需要开发一个类似Deployment的资源逻辑，管理依赖资源是控制器的基础，如果不能观察它们的状态变化就不可能管理它们。这就意味着，我们需要 reconciler 能监控多个资源</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubebuilder Best Practices</title>
    <link href="http://example.com/2023/05/23/kubebuilder-best-practices/"/>
    <id>http://example.com/2023/05/23/kubebuilder-best-practices/</id>
    <published>2023-05-23T03:49:44.614Z</published>
    <updated>2023-05-24T15:34:56.391Z</updated>
    
    <content type="html"><![CDATA[<p>Kubebuilder is a framework for building Kubernetes APIs using custom resource definitions (CRDs).</p><blockquote><p>Note: kubebuilder can save us a lot of work and make developing CRDs and adminsion webhooks incredibly easy.</p></blockquote><h1 id="installation"><a class="markdownIt-Anchor" href="#installation"></a> Installation</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># download kubebuilder and install locally.</span><br><span class="line">curl -L -o kubebuilder https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)</span><br><span class="line">chmod +x kubebuilder &amp;&amp; mv kubebuilder /usr/local/bin/</span><br></pre></td></tr></table></figure><h1 id="create-a-project"><a class="markdownIt-Anchor" href="#create-a-project"></a> Create a Project</h1><blockquote><p>Create a directory, and then run the init command inside of it to initialize a new project. Follows an example.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[marklu@MacBook ~]$ mkdir ~/Project/workspace-go/example</span><br><span class="line">[marklu@MacBook ~]$ cd ~/Project/workspace-go/example</span><br><span class="line">[marklu@MacBook ~]$ kubebuilder init --domain marklu.com --owner &quot;marklu&quot; --repo marklu.com/example</span><br><span class="line">Writing kustomize manifests for you to edit...</span><br><span class="line">Writing scaffold for you to edit...</span><br><span class="line">Get controller runtime:</span><br><span class="line">$ go get sigs.k8s.io/controller-runtime@v0.10.0</span><br><span class="line">Update dependencies:</span><br><span class="line">$ go mod tidy</span><br><span class="line">Next: define a resource with:</span><br><span class="line">$ kubebuilder create api</span><br></pre></td></tr></table></figure><blockquote><p>If your project is initialized within GOPATH, the implicitly called go mod init will interpolate the module path for you. Otherwise –repo=must be set.</p></blockquote><h1 id="adding-a-new-api"><a class="markdownIt-Anchor" href="#adding-a-new-api"></a> Adding a new API</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[marklu@MacBook ~]$ kubebuilder create api --group cos --version v1 --kind Bucket</span><br><span class="line">Create Resource [y/n]</span><br><span class="line">y</span><br><span class="line">Create Controller [y/n]</span><br><span class="line">y</span><br><span class="line">Writing kustomize manifests for you to edit...</span><br><span class="line">Writing scaffold for you to edit...</span><br><span class="line">api/v1/bucket_types.go</span><br><span class="line">controllers/bucket_controller.go</span><br><span class="line">Update dependencies:</span><br><span class="line">$ go mod tidy</span><br><span class="line">Running make:</span><br><span class="line">$ make generate</span><br><span class="line">go: creating new go.mod: module tmp</span><br><span class="line">Downloading sigs.k8s.io/controller-tools/cmd/controller-gen@v0.7.0</span><br><span class="line">go get: added sigs.k8s.io/controller-tools v0.7.0</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen object:headerFile=&quot;hack/boilerplate.go.txt&quot; paths=&quot;./...&quot;</span><br><span class="line">Next: implement your new API and generate the manifests (e.g. CRDs,CRs) with:</span><br><span class="line">$ make manifests</span><br></pre></td></tr></table></figure><h1 id="designing-an-api"><a class="markdownIt-Anchor" href="#designing-an-api"></a> Designing an API</h1><blockquote><p>api/v1/bucket_types.go</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// BucketSpec defines the desired state of Bucket</span><br><span class="line">type BucketSpec struct &#123;</span><br><span class="line">// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster</span><br><span class="line">// Important: Run &quot;make&quot; to regenerate code after modifying this file</span><br><span class="line"></span><br><span class="line">// Foo is an example field of Bucket. Edit bucket_types.go to remove/update</span><br><span class="line">Name   string `json:&quot;name,omitempty&quot;`</span><br><span class="line">Region string `json:&quot;region,omitempty&quot;`</span><br><span class="line">ACL    string `json:&quot;acl,omitempty&quot;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="implementing-a-controller"><a class="markdownIt-Anchor" href="#implementing-a-controller"></a> Implementing a controller</h1><blockquote><p>controllers/cos.go</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package controllers</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;github.com/tencentyun/cos-go-sdk-v5&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">&quot;net/url&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type CosStorage struct &#123;</span><br><span class="line">client          *cos.Client</span><br><span class="line">accessKeyId     string</span><br><span class="line">accessKeySecret string</span><br><span class="line">bucket          string</span><br><span class="line">region          string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NewCosStorage endpoint: https://cloud.tencent.com/document/product/436/6224</span><br><span class="line">func NewCosStorage(region, bucketName string) *CosStorage &#123;</span><br><span class="line">url, _ := url.Parse(fmt.Sprintf(&quot;https://%s.cos.%s.myqcloud.com&quot;, bucketName, region))</span><br><span class="line">accessKeyId := &quot;&quot;</span><br><span class="line">accessKeySecret := &quot;&quot;</span><br><span class="line">b := &amp;cos.BaseURL&#123;BucketURL: url&#125;</span><br><span class="line">client := cos.NewClient(b, &amp;http.Client&#123;</span><br><span class="line">Transport: &amp;cos.AuthorizationTransport&#123;</span><br><span class="line">SecretID:  accessKeyId,</span><br><span class="line">SecretKey: accessKeySecret,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">return &amp;CosStorage&#123;</span><br><span class="line">client:          client,</span><br><span class="line">accessKeyId:     accessKeyId,</span><br><span class="line">accessKeySecret: accessKeySecret,</span><br><span class="line">region:          region,</span><br><span class="line">bucket:          bucketName,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c *CosStorage) Put(acl string) error &#123;</span><br><span class="line">opt := &amp;cos.BucketPutOptions&#123;</span><br><span class="line">XCosACL: acl,</span><br><span class="line">&#125;</span><br><span class="line">_, err := c.client.Bucket.Put(context.Background(), opt)</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c *CosStorage) Delete() error &#123;</span><br><span class="line">_, err := c.client.Bucket.Delete(context.Background())</span><br><span class="line">return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controllers/bucket_controller.go</p><blockquote><p>tips: Finalizers allow controllers to implement asynchronous pre-delete hooks. Let’s say you create an external resource (such as a storage bucket) for each object of your API type, and you want to delete the associated external resource on object’s deletion from Kubernetes, you can use a finalizer to do that.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Copyright 2022 marklu.</span><br><span class="line"></span><br><span class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">you may not use this file except in compliance with the License.</span><br><span class="line">You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">Unless required by applicable law or agreed to in writing, software</span><br><span class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">See the License for the specific language governing permissions and</span><br><span class="line">limitations under the License.</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">package controllers</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;context&quot;</span><br><span class="line">&quot;k8s.io/apimachinery/pkg/runtime&quot;</span><br><span class="line">ctrl &quot;sigs.k8s.io/controller-runtime&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/client&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/controller/controllerutil&quot;</span><br><span class="line">&quot;sigs.k8s.io/controller-runtime/pkg/log&quot;</span><br><span class="line"></span><br><span class="line">cosv1 &quot;marklu.com/example/api/v1&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// BucketReconciler reconciles a Bucket object</span><br><span class="line">type BucketReconciler struct &#123;</span><br><span class="line">client.Client</span><br><span class="line">Scheme *runtime.Scheme</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">bucketFinalizerName = &quot;bucket.cos.marklu.com/finalizer&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">//+kubebuilder:rbac:groups=cos.marklu.com,resources=buckets,verbs=get;list;watch;create;update;patch;delete</span><br><span class="line">//+kubebuilder:rbac:groups=cos.marklu.com,resources=buckets/status,verbs=get;update;patch</span><br><span class="line">//+kubebuilder:rbac:groups=cos.marklu.com,resources=buckets/finalizers,verbs=update</span><br><span class="line"></span><br><span class="line">// Reconcile is part of the main kubernetes reconciliation loop which aims to</span><br><span class="line">// move the current state of the cluster closer to the desired state.</span><br><span class="line">// TODO(user): Modify the Reconcile function to compare the state specified by</span><br><span class="line">// the Bucket object against the actual cluster state, and then</span><br><span class="line">// perform operations to make the cluster state reflect the state specified by</span><br><span class="line">// the user.</span><br><span class="line">//</span><br><span class="line">// For more details, check Reconcile and its Result here:</span><br><span class="line">// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.10.0/pkg/reconcile</span><br><span class="line">func (r *BucketReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) &#123;</span><br><span class="line">logger := log.FromContext(ctx)</span><br><span class="line"></span><br><span class="line">bucket := &amp;cosv1.Bucket&#123;&#125;</span><br><span class="line">if err := r.Get(ctx, req.NamespacedName, bucket); err != nil &#123;</span><br><span class="line">return ctrl.Result&#123;&#125;, client.IgnoreNotFound(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// examine DeletionTimestamp to determine if object is under deletion</span><br><span class="line">if bucket.ObjectMeta.DeletionTimestamp.IsZero() &#123;</span><br><span class="line">// The object is not being deleted, so if it does not have our finalizer,</span><br><span class="line">// then lets add the finalizer and update the object. This is equivalent</span><br><span class="line">// registering our finalizer.</span><br><span class="line">if !controllerutil.ContainsFinalizer(bucket, bucketFinalizerName) &#123;</span><br><span class="line">controllerutil.AddFinalizer(bucket, bucketFinalizerName)</span><br><span class="line">if err := r.Update(ctx, bucket); err != nil &#123;</span><br><span class="line">return ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">if err := r.updateExternalResources(bucket); err != nil &#123;</span><br><span class="line">logger.Error(err, &quot;unable to create Bucket&quot;)</span><br><span class="line">return ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">logger.Info(&quot;create Bucket succeed&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// The object is being deleted</span><br><span class="line">if controllerutil.ContainsFinalizer(bucket, bucketFinalizerName) &#123;</span><br><span class="line">// our finalizer is present, so lets handle any external dependency</span><br><span class="line">if err := r.deleteExternalResources(bucket); err != nil &#123;</span><br><span class="line">// if fail to delete the external dependency here, return with error</span><br><span class="line">// so that it can be retried</span><br><span class="line">logger.Error(err, &quot;unable to delete Bucket&quot;)</span><br><span class="line">return ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// remove our finalizer from the list and update it.</span><br><span class="line">controllerutil.RemoveFinalizer(bucket, bucketFinalizerName)</span><br><span class="line">if err := r.Update(ctx, bucket); err != nil &#123;</span><br><span class="line">return ctrl.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">logger.Info(&quot;delete Bucket succeed&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Stop reconciliation as the item is being deleted</span><br><span class="line">return ctrl.Result&#123;&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// bucket reconcile logic</span><br><span class="line">return ctrl.Result&#123;&#125;, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (r *BucketReconciler) updateExternalResources(bucket *cosv1.Bucket) error &#123;</span><br><span class="line">cosClient := NewCosStorage(bucket.Spec.Region, bucket.Spec.Name)</span><br><span class="line">return cosClient.Put(bucket.Spec.ACL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (r *BucketReconciler) deleteExternalResources(bucket *cosv1.Bucket) error &#123;</span><br><span class="line">cosClient := NewCosStorage(bucket.Spec.Region, bucket.Spec.Name)</span><br><span class="line">return cosClient.Delete()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SetupWithManager sets up the controller with the Manager.</span><br><span class="line">func (r *BucketReconciler) SetupWithManager(mgr ctrl.Manager) error &#123;</span><br><span class="line">return ctrl.NewControllerManagedBy(mgr).</span><br><span class="line">For(&amp;cosv1.Bucket&#123;&#125;).</span><br><span class="line">Complete(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="test-it-out"><a class="markdownIt-Anchor" href="#test-it-out"></a> Test It Out</h1><blockquote><ol><li>Install the CRDs into the cluster (make install)</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[marklu@MacBook ~]$ make install</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen rbac:roleName=manager-role crd webhook paths=&quot;./...&quot; output:crd:artifacts:config=config/crd/bases</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/kustomize build config/crd | kubectl apply -f -</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/buckets.cos.marklu.com created</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running) (make run)</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[marklu@MacBook ~]$ make run</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen rbac:roleName=manager-role crd webhook paths=&quot;./...&quot; output:crd:artifacts:config=config/crd/bases</span><br><span class="line">/Users/huyuhan/Project/workspace-go/example/bin/controller-gen object:headerFile=&quot;hack/boilerplate.go.txt&quot; paths=&quot;./...&quot;</span><br><span class="line">go fmt ./...</span><br><span class="line">go vet ./...</span><br><span class="line">go run ./main.go</span><br><span class="line">2022-01-27T22:05:30.207+0800INFOcontroller-runtime.metricsmetrics server is starting to listen&#123;&quot;addr&quot;: &quot;:8080&quot;&#125;</span><br><span class="line">2022-01-27T22:05:30.207+0800INFOsetupstarting manager</span><br><span class="line">2022-01-27T22:05:30.208+0800INFOstarting metrics server&#123;&quot;path&quot;: &quot;/metrics&quot;&#125;</span><br><span class="line">2022-01-27T22:05:30.208+0800INFOcontroller.bucketStarting EventSource&#123;&quot;reconciler group&quot;: &quot;cos.marklu.com&quot;, &quot;reconciler kind&quot;: &quot;Bucket&quot;, &quot;source&quot;: &quot;kind source: /, Kind=&quot;&#125;</span><br><span class="line">2022-01-27T22:05:30.208+0800INFOcontroller.bucketStarting Controller&#123;&quot;reconciler group&quot;: &quot;cos.marklu.com&quot;, &quot;reconciler kind&quot;: &quot;Bucket&quot;&#125;</span><br><span class="line">2022-01-27T22:05:30.309+0800INFOcontroller.bucketStarting workers&#123;&quot;reconciler group&quot;: &quot;cos.marklu.com&quot;, &quot;reconciler kind&quot;: &quot;Bucket&quot;, &quot;worker count&quot;: 1&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>Create Custom Resources (create <a href="http://bucket.cos.marklu.com/bucket-sample">bucket.cos.marklu.com/bucket-sample</a>) (cos_v1_bucket.yaml)</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: cos.marklu.com/v1</span><br><span class="line">kind: Bucket</span><br><span class="line">metadata:</span><br><span class="line">  name: bucket-sample</span><br><span class="line">  namespace: marklu</span><br><span class="line">spec:</span><br><span class="line">  # TODO(user): Add fields here</span><br><span class="line">  name: example-1251762279</span><br><span class="line">  region: ap-shanghai</span><br><span class="line">  acl: private</span><br></pre></td></tr></table></figure><p>kubectl apply -f cos_v1_bucket.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[marklu@MacBook ~]$ kubectl apply -f cos_v1_bucket.yaml</span><br><span class="line">bucket.cos.marklu.com/bucket-sample created</span><br><span class="line">[marklu@MacBook ~]$ kubectl get bucket.cos.marklu.com  -n marklu</span><br><span class="line">NAME            AGE</span><br><span class="line">bucket-sample   17s</span><br></pre></td></tr></table></figure><p>Tencent cloud console view found that the bucket was created normally.</p><blockquote><ol start="4"><li>Delete Instances of Custom Resources (delete <a href="http://bucket.cos.marklu.com/bucket-sample">bucket.cos.marklu.com/bucket-sample</a>)</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[marklu@MacBook ~]$ kubectl delete -f cos_v1_bucket.yaml</span><br><span class="line">bucket.cos.marklu.com &quot;bucket-sample&quot; deleted</span><br></pre></td></tr></table></figure><h1 id="run-it-on-the-cluster"><a class="markdownIt-Anchor" href="#run-it-on-the-cluster"></a> Run It On the Cluster</h1><blockquote><p>Deploy the controller to the cluster with image specified by IMG</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make docker-build docker-push IMG=&lt;some-registry&gt;/&lt;project-name&gt;:tag</span><br><span class="line">make deploy IMG=&lt;some-registry&gt;/&lt;project-name&gt;:tag</span><br></pre></td></tr></table></figure><h1 id="reference-documentation"><a class="markdownIt-Anchor" href="#reference-documentation"></a> Reference documentation</h1><ul><li><a href="https://github.com/kubernetes-sigs/kubebuilder">https://github.com/kubernetes-sigs/kubebuilder</a></li><li><a href="https://book.kubebuilder.io/introduction.html">https://book.kubebuilder.io/introduction.html</a></li><li><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/">https://kubernetes.io/docs/concepts/extend-kubernetes/operator/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubebuilder is a framework for building Kubernetes APIs using custom resource definitions (CRDs).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: kubebuilder c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubebuilder Webhook 开发之创建 TLS 证书</title>
    <link href="http://example.com/2023/05/23/kubebuilder-webhook/"/>
    <id>http://example.com/2023/05/23/kubebuilder-webhook/</id>
    <published>2023-05-23T03:35:30.332Z</published>
    <updated>2023-05-23T03:46:40.746Z</updated>
    
    <content type="html"><![CDATA[<p>Kubebuilder Webhook 开发之创建 TLS 证书<br />在编写一个准入 Webhook 服务时，需要配置相关证书，k8s 提供了 api 用于对用户自主创建的证书进行认证签发。以下部分演示为 Webhook 服务创建 TLS 证书。</p><p>创建 TLS 证书<br />创建你的证书<br />通过运行以下命令生成私钥:</p><p>cat &lt;&lt;EOF | cfssl genkey - | cfssljson -bare server<br />{<br />“hosts”: [<br />“my-svc.my-namespace.svc.cluster.local”,<br />“my-pod.my-namespace.pod.cluster.local”,<br />“192.0.2.24”,<br />“10.0.34.2”<br />],<br />“CN”: “my-pod.my-namespace.pod.cluster.local”,<br />“key”: {<br />“algo”: “ecdsa”,<br />“size”: 256<br />}<br />}<br />EOF</p><p>此命令生成两个文件；它生成包含 PEM 编码 PKCS#10 证书请求的 server.csr， 以及 PEM 编码密钥的 server-key.pem，用于待生成的证书。</p><p>创建证书签名请求（CSR）<br />cat &lt;&lt;EOF | kubectl apply -f -<br />apiVersion: <a href="http://certificates.k8s.io/v1beta1">certificates.k8s.io/v1beta1</a><br />kind: CertificateSigningRequest<br />metadata:<br />name: example<br />spec:<br />request: $(cat server.csr | base64 | tr -d ‘\n’)<br />usages:</p><p>•digital signature<br />•key encipherment<br />•server auth<br />EOF</p><p>你能看到的输出类似于：</p><p><a href="http://certificatesigningrequest.certificates.k8s.io/example">certificatesigningrequest.certificates.k8s.io/example</a> created</p><p>Warning: <a href="http://certificates.k8s.io/v1beta1">certificates.k8s.io/v1beta1</a> CertificateSigningRequest is deprecated in v1.19+, unavailable in v1.22+; use <a href="http://certificates.k8s.io/v1">certificates.k8s.io/v1</a> CertificateSigningRequest</p><p>CSR 处于 Pending 状态。执行下面的命令你将可以看到：</p><p>kubectl get csr</p><p>NAME AGE SIGNERNAME REQUESTOR CONDITION<br />example 17s <a href="http://kubernetes.io/legacy-unknown">kubernetes.io/legacy-unknown</a> 100015926370-1650441195 Pending</p><p>批准证书签名请求（CSR）<br />kubectl certificate approve example</p><p><a href="http://certificatesigningrequest.certificates.k8s.io/example">certificatesigningrequest.certificates.k8s.io/example</a> approved</p><p>你现在应该能看到如下输出：</p><p>kubectl get csr</p><p>NAME AGE SIGNERNAME REQUESTOR CONDITION<br />example 5m4s <a href="http://kubernetes.io/legacy-unknown">kubernetes.io/legacy-unknown</a> 100015926370-1650441195 Approved,Issued</p><p>下载证书并使用它<br />kubectl get csr example -o jsonpath=‘{.status.certificate}’ | base64 --decode &gt; server.crt</p><p>现在你可以将 server.crt 和 server-key.pem 作为你的服务的 https 认证了。</p><p>例如 kubebuilder 中使用 TLS 证书，将 server.crt 和 server-key.pem 放在 cert 目录中并修改名称为 tls.crt 和 tls.key，然后指定证书目录：</p><p>mgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{<br />Scheme: scheme,<br />MetricsBindAddress: metricsAddr,<br />Port: 9443,<br />HealthProbeBindAddress: probeAddr,<br />LeaderElection: enableLeaderElection,<br />LeaderElectionID: “<a href="http://27e1b0af.blazehu.com">27e1b0af.blazehu.com</a>”,<br />CertDir: “./cert/”,<br />})</p><p>从 v1beta1 迁移到 v1<br />上述例子使用 <a href="http://certificates.k8s.io/v1beta1">certificates.k8s.io/v1beta1</a> API 版本的 CertificateSigningRequest 不在 v1.22 版本中继续提供。官方迁移指南点这里。 我们可以使用 <a href="http://certificates.k8s.io/v1">certificates.k8s.io/v1</a> API 版本，此 API 从 v1.19 版本开始可用。</p><p>•<a href="http://certificates.k8s.io/v1">certificates.k8s.io/v1</a> 中需要额外注意的变更：<br />•对于请求证书的 API 客户端而言：<br />•spec.signerName 现在变成必需字段（参阅 已知的 Kubernetes 签署者）， 并且通过 <a href="http://certificates.k8s.io/v1">certificates.k8s.io/v1</a> API 不可以创建签署者为 <a href="http://kubernetes.io/legacy-unknown">kubernetes.io/legacy-unknown</a> 的请求<br />•spec.usages 现在变成必需字段，其中不可以包含重复的字符串值， 并且只能包含已知的用法字符串</p><p>创建你的证书<br />通过运行以下命令生成私钥:</p><p>cat &lt;&lt;EOF | cfssl genkey - | cfssljson -bare server<br />{<br />“hosts”: [<br />“my-svc.my-namespace.svc.cluster.local”,<br />“my-pod.my-namespace.pod.cluster.local”,<br />“192.0.2.24”,<br />“10.0.34.2”<br />],<br />“CN”: “my-pod.my-namespace.pod.cluster.local”,<br />“key”: {<br />“algo”: “ecdsa”,<br />“size”: 256<br />}<br />}<br />EOF</p><p>创建证书签名请求（CSR）<br />这里 csr signerName 不能是 <a href="http://kubernetes.io/legacy-unknown%EF%BC%8C%E6%BC%94%E7%A4%BA%E6%88%91%E4%BB%AC%E9%9A%8F%E4%BE%BF%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E4%B8%BA">kubernetes.io/legacy-unknown，演示我们随便指定一个为</a> <a href="http://example.com/serving%EF%BC%8Cv1beta1">example.com/serving，v1beta1</a> 版本默认是 <a href="http://kubernetes.io/legacy-unknown%E3%80%82">kubernetes.io/legacy-unknown。</a></p><p>cat &lt;&lt;EOF | kubectl apply -f -<br />apiVersion: <a href="http://certificates.k8s.io/v1">certificates.k8s.io/v1</a><br />kind: CertificateSigningRequest<br />metadata:<br />name: example<br />spec:<br />request: $(cat server.csr | base64 | tr -d ‘\n’)<br />signerName: <a href="http://example.com/serving">example.com/serving</a><br />usages:</p><p>•digital signature<br />•key encipherment<br />•server auth<br />EOF</p><p>批准证书签名请求（CSR）<br />kubectl certificate approve example</p><p><a href="http://certificatesigningrequest.certificates.k8s.io/example">certificatesigningrequest.certificates.k8s.io/example</a> approved</p><p>你现在应该能看到如下输出：</p><p>kubectl get csr</p><p>NAME AGE SIGNERNAME REQUESTOR CONDITION<br />example 11s <a href="http://example.com/serving">example.com/serving</a> 100015926370-1650441195 Approved</p><p>这里可以看到证书请求已被批准，但是没有自动签名，正在等待请求的签名者对其签名。</p><p>签名证书签名请求（CSR）<br />我们扮演证书签署者的角色，颁发证书并将其上传到 API 服务器。</p><p>创建证书颁发机构<br />通过运行以下命令创建签名证书:</p><p>cat &lt;&lt;EOF | cfssl gencert -initca - | cfssljson -bare ca<br />{<br />“CN”: “<a href="http://example.com/serving">example.com/serving</a>”,<br />“key”: {<br />“algo”: “rsa”,<br />“size”: 2048<br />}<br />}<br />EOF</p><p>这会产生一个证书颁发机构密钥文件（ca-key.pem）和证书（ca.pem）。</p><p>颁发证书<br />创建文件 server-signing-config.json 内容如下：</p><p>{<br />“signing”: {<br />“default”: {<br />“usages”: [<br />“digital signature”,<br />“key encipherment”,<br />“server auth”<br />],<br />“expiry”: “876000h”,<br />“ca_constraint”: {<br />“is_ca”: false<br />}<br />}<br />}<br />}</p><p>使用 server-signing-config.json 签名配置、证书颁发机构密钥文件和证书来签署证书请求：</p><p>kubectl get csr example -o jsonpath=‘{.spec.request}’ | <br />base64 --decode | <br />cfssl sign -ca ca.pem -ca-key ca-key.pem -config server-signing-config.json - | <br />cfssljson -bare ca-signed-server</p><p>这会生成一个签名的服务证书文件，ca-signed-server.pem。</p><p>上传签名证书<br />kubectl get csr example -o json | <br />jq ‘.status.certificate = &quot;’$(base64 ca-signed-server.pem | tr -d ‘\n’)‘&quot;’ | <br />kubectl replace --raw /apis/certificates.k8s.io/v1/certificatesigningrequests/example/status -f -</p><p>批准 CSR 并上传签名证书后，你现在应该能看到如下输出：</p><p>kubectl get csr</p><p>NAME AGE SIGNERNAME REQUESTOR CONDITION<br />example 10m <a href="http://example.com/serving">example.com/serving</a> 100015926370-1650441195 Approved,Issued</p><p>这是你可以正常下载证书并使用它了。</p><p>参考文档<br />•<a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/certificate-signing-requests/">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/certificate-signing-requests/</a><br />•<a href="https://kubernetes.io/zh-cn/docs/tasks/tls/managing-tls-in-a-cluster/#configuring-your-cluster-to-provide-signing">https://kubernetes.io/zh-cn/docs/tasks/tls/managing-tls-in-a-cluster/#configuring-your-cluster-to-provide-signing</a><br />•<a href="https://kubernetes.io/zh-cn/docs/reference/using-api/deprecation-guide/">https://kubernetes.io/zh-cn/docs/reference/using-api/deprecation-guide/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Kubebuilder Webhook 开发之创建 TLS 证书&lt;br /&gt;
在编写一个准入 Webhook 服务时，需要配置相关证书，k8s 提供了 api 用于对用户自主创建的证书进行认证签发。以下部分演示为 Webhook 服务创建 TLS 证书。&lt;/p&gt;
&lt;p&gt;创建</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo部署文档</title>
    <link href="http://example.com/2023/05/23/hexo/"/>
    <id>http://example.com/2023/05/23/hexo/</id>
    <published>2023-05-23T02:30:45.919Z</published>
    <updated>2023-05-24T14:31:58.756Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deploy前先删除public目录</span></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://blog.cofess.com/2017/11/01/hexo-blog-theme-pure-usage-description.html // 部署文档</span><br><span class="line">http://blog.iwwee.com/posts/hexo-optimize.html // 优化</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
